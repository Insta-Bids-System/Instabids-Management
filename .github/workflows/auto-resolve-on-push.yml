name: Auto Resolve Conflicts On Push

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize]
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes

jobs:
  resolve-conflicts:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
    
    steps:
      - name: Check for open PRs with conflicts
        id: check-prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            for (const pr of prs.data) {
              console.log(`Checking PR #${pr.number}: ${pr.title}`);
              const prDetails = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              if (prDetails.data.mergeable === false) {
                console.log(`PR #${pr.number} has conflicts! Starting resolution...`);
                core.setOutput('has_conflicts', 'true');
                core.setOutput('pr_number', pr.number);
                core.setOutput('pr_branch', prDetails.data.head.ref);
                core.setOutput('base_branch', prDetails.data.base.ref);
                return; // Process one PR at a time
              }
            }
            core.setOutput('has_conflicts', 'false');
      
      - name: Checkout PR branch
        if: steps.check-prs.outputs.has_conflicts == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        if: steps.check-prs.outputs.has_conflicts == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Fetch and checkout PR branch
        if: steps.check-prs.outputs.has_conflicts == 'true'
        run: |
          git fetch origin ${{ steps.check-prs.outputs.pr_branch }}
          git checkout ${{ steps.check-prs.outputs.pr_branch }}
          git fetch origin ${{ steps.check-prs.outputs.base_branch }}
          
      - name: Attempt merge and resolve conflicts
        if: steps.check-prs.outputs.has_conflicts == 'true'
        id: resolve
        run: |
          echo "Attempting to merge ${{ steps.check-prs.outputs.base_branch }} into ${{ steps.check-prs.outputs.pr_branch }}"
          
          # Try to merge
          if ! git merge origin/${{ steps.check-prs.outputs.base_branch }}; then
            echo "Merge failed, resolving conflicts..."
            
            # Find all conflicted files
            conflicted_files=$(git diff --name-only --diff-filter=U)
            
            if [ -z "$conflicted_files" ]; then
              echo "No conflicts found"
              exit 0
            fi
            
            # Resolve each conflicted file
            for file in $conflicted_files; do
              echo "Resolving conflicts in: $file"
              
              # Smart conflict resolution
              python3 << 'PYTHON_SCRIPT'
import sys
import re

file_path = "$file"
try:
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Pattern to match Git conflict markers
    conflict_pattern = re.compile(
        r'<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n',
        re.DOTALL
    )
    
    def resolve_conflict(match):
        current = match.group(1)
        incoming = match.group(2)
        
        # Strategy: Try to keep both changes if they're in different parts
        if 'import' in current or 'import' in incoming:
            # For imports, keep both unique imports
            return f"{current}\n{incoming}"
        elif 'version' in current.lower() or 'version' in incoming.lower():
            # For version conflicts, take the incoming (newer) version
            return incoming
        else:
            # Default: Keep incoming changes as they're usually newer
            return incoming
    
    resolved = conflict_pattern.sub(resolve_conflict, content)
    
    # If no conflicts were found, the file might have different conflict markers
    if resolved == content:
        # Try alternative conflict pattern
        alt_pattern = re.compile(
            r'<<<<<<<[^\n]*\n(.*?)\n=======\n(.*?)\n>>>>>>>[^\n]*\n',
            re.DOTALL | re.MULTILINE
        )
        resolved = alt_pattern.sub(lambda m: m.group(2), content)
    
    with open(file_path, 'w') as f:
        f.write(resolved)
    
    print(f"Successfully resolved {file_path}")
except Exception as e:
    print(f"Error resolving {file_path}: {e}")
    sys.exit(1)
PYTHON_SCRIPT
              
              git add "$file"
            done
            
            # Commit the resolution
            git commit -m "ðŸ¤– Auto-resolve merge conflicts in PR #${{ steps.check-prs.outputs.pr_number }}

Conflicts resolved automatically using intelligent merge strategy.
Files resolved: $conflicted_files"
          else
            echo "Merge successful without conflicts"
          fi
          
      - name: Push resolved changes
        if: steps.check-prs.outputs.has_conflicts == 'true'
        run: |
          git push origin ${{ steps.check-prs.outputs.pr_branch }} --force-with-lease
          
      - name: Comment on PR
        if: steps.check-prs.outputs.has_conflicts == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.check-prs.outputs.pr_number }},
              body: 'âœ… **Conflicts Automatically Resolved!**\n\nI\'ve automatically resolved the merge conflicts in this PR. Please review the changes to ensure everything looks correct.\n\nðŸ¤– _Automated by GitHub Actions_'
            });