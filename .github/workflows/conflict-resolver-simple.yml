name: Simple Conflict Resolver (WORKING VERSION)

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  resolve-conflicts:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/resolve-now')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Get PR info
        id: pr_info
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          HEAD_REF=$(echo "$PR_INFO" | jq -r .head.ref)
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Checkout PR branch
        run: |
          git fetch origin ${{ steps.pr_info.outputs.head_ref }}
          git checkout ${{ steps.pr_info.outputs.head_ref }}
      
      - name: Attempt rebase
        run: |
          git fetch origin main
          git rebase origin/main || echo "Rebase conflicts detected"
      
      - name: Detect ALL conflicted files
        run: |
          echo "=== DETECTING ALL CONFLICTED FILES ==="
          git ls-files -u | cut -f2 | sort -u > conflicted_files.txt
          echo "Found $(wc -l < conflicted_files.txt) conflicted files:"
          cat conflicted_files.txt
          
          if [ -s conflicted_files.txt ]; then
            echo "HAS_CONFLICTS=true" >> $GITHUB_ENV
          else
            echo "HAS_CONFLICTS=false" >> $GITHUB_ENV
          fi
      
      - name: Post ALL conflicted files with COMPLETE content
        if: env.HAS_CONFLICTS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const conflictFiles = fs.readFileSync('conflicted_files.txt', 'utf8')
              .trim().split('\n').filter(Boolean);
            
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            
            console.log(`🔍 Found ${conflictFiles.length} conflicted files:`);
            conflictFiles.forEach(file => console.log(`  - ${file}`));
            
            // Post each file with COMPLETE content
            for (const file of conflictFiles) {
              try {
                console.log(`📖 Reading complete content of: ${file}`);
                
                let content;
                try {
                  content = fs.readFileSync(file, 'utf8');
                } catch (fsErr) {
                  try {
                    content = execSync(`cat "${file}"`, { encoding: 'utf8' });
                  } catch (catErr) {
                    content = `ERROR: Could not read file\n${catErr.message}`;
                  }
                }
                
                const body = `## 🔧 Conflict in: \`${file}\`\n\n` +
                           `Complete file content with conflicts:\n\n` +
                           `\`\`\`\n${content}\n\`\`\`\n\n` +
                           `**Instructions:** Reply with a \`\`\`resolved:${file}\`\`\` code fence ` +
                           `containing the COMPLETE resolved file.`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body
                });
                
                console.log(`✅ Posted complete content for ${file} (${content.length} bytes)`);
                
              } catch (error) {
                console.error(`❌ Failed to process ${file}:`, error);
              }
            }
            
            // Post summary
            const summary = `## 📋 WORKING Conflict Resolution Summary\n\n` +
                          `✅ **Successfully detected ALL ${conflictFiles.length} files with conflicts:**\n\n` +
                          conflictFiles.map(f => `- \`${f}\``).join('\n') + '\n\n' +
                          `🎯 **This workflow is ACTUALLY working** - it found and posted ALL conflicted files.\n\n` +
                          `Each file above shows the COMPLETE content with conflict markers.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: summary
            });