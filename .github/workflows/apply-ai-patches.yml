name: Apply AI patches from comment

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    # Only on PRs, only when the comment contains code fences, and only from a bot/user you trust (adjust handle)
    if: >
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '```') &&
      (
        github.event.comment.user.type == 'Bot' ||
        contains(github.event.comment.user.login, 'codex')
      )
    runs-on: ubuntu-latest

    steps:
      - name: Get PR info
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })).data;
            core.setOutput('ref', pr.head.ref);
            core.setOutput('repo', pr.head.repo.full_name);

      - name: Checkout PR head branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.ref }}
          fetch-depth: 0

      - name: Save comment body
        run: |
          echo "${{ github.event.comment.body }}" > /tmp/comment.txt

      - name: Apply patches or file replacements
        run: |
          python - <<'PY'
          import re, os, subprocess, pathlib, sys
          body = pathlib.Path('/tmp/comment.txt').read_text()

          def sh(cmd):
            print('+', cmd); 
            return subprocess.run(cmd, shell=True, check=False)

          applied = 0
          # 1) Unified diffs:  ```patch ...```  or  ```diff ...```
          for m in re.finditer(r"```(?:patch|diff)\n(.*?)```", body, re.S):
            patch = m.group(1)
            pathlib.Path('/tmp/patch.diff').write_text(patch)
            r = sh("git apply --index --reject /tmp/patch.diff")
            if r.returncode == 0:
              applied += 1
            else:
              print('!! failed to apply a patch hunk')

          # 2) Full-file replaces:  ```resolved:path/to/file.py\n<contents>\n```
          for m in re.finditer(r"```resolved:([^\n]+)\n(.*?)```", body, re.S):
            path, content = m.group(1).strip(), m.group(2)
            p = pathlib.Path(path)
            p.parent.mkdir(parents=True, exist_ok=True)
            p.write_text(content)
            sh(f"git add -- '{path}'")
            applied += 1

          if applied == 0:
            print('No recognized patch blocks found.')
            sys.exit(1)
          PY

      - name: Normalize & test
        run: |
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install black isort >/dev/null 2>&1 || true
          isort . || true
          black . || true
          git add -A
          # optional: run your fast tests here

      - name: Commit & push
        run: |
          if ! git diff --cached --quiet; then
            git -c user.name="ai-fixer-bot" -c user.email="ai-fixer-bot@users.noreply.github.com" \
              commit -m "apply AI patch from comment"
            git push --force-with-lease origin HEAD:${{ steps.pr.outputs.ref }}
          else
            echo "No changes to commit"
