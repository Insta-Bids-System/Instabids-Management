name: Auto-rebase PRs and autofix trivial conflicts

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: "*/20 * * * *"
  issue_comment:
    types: [created]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  CODEX_HANDLE: "@codex"

jobs:
  collect:
    if: github.event_name != 'issue_comment'
    runs-on: ubuntu-latest
    outputs:
      prs: ${{ steps.out.outputs.prs }}
    steps:
      - id: out
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const all = await github.paginate(
              github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 }
            );
            const target = all
              .filter(pr => pr.base.ref === 'main' && pr.head.repo.full_name === `${owner}/${repo}`)
              .map(pr => ({ number: pr.number, ref: pr.head.ref, repo: pr.head.repo.full_name }));
            core.setOutput('prs', JSON.stringify(target));

  update:
    if: github.event_name != 'issue_comment' && fromJSON(needs.collect.outputs.prs).length > 0
    needs: collect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pr: ${{ fromJSON(needs.collect.outputs.prs) }}
      max-parallel: 3
    steps:
      - name: Checkout PR head branch
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.pr.repo }}
          ref: ${{ matrix.pr.ref }}
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Bot identity & rerere
        run: |
          git config user.name  "autorebase-bot"
          git config user.email "autorebase-bot@users.noreply.github.com"
          git config rerere.enabled true
          git remote add upstream "https://github.com/${{ github.repository }}.git"
          git fetch upstream main

      - name: Rebase onto latest main (continue on conflicts)
        run: git rebase upstream/main || true

      - name: Autofix common conflicts
        run: |
          python - <<'PY'
          import re, subprocess, pathlib
          sh=lambda c: subprocess.run(c, shell=True, check=False)
          # Markdown: union (drop markers)
          for p in pathlib.Path('.').rglob('*.md'):
              t=p.read_text(errors='ignore')
              if '<<<<<<<' in t and '>>>>>>>' in t:
                  t=re.sub(r'^<<<<<<< .*?\n|^=======\n|^>>>>>>> .*?\n','',t,flags=re.M)
                  p.write_text(t); sh(f"git add {p}")
          # Lockfiles: prefer ours
          for n in ['package-lock.json','yarn.lock','pnpm-lock.yaml','poetry.lock']:
              p=pathlib.Path(n)
              if p.exists(): sh(f"git checkout --ours {n} && git add {n}")
          # Python: union/dedupe imports, dedupe include_router blocks
          CON=re.compile(r"<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n", re.S)
          def dedupe(xs):
              out=[]; seen=set()
              for x in xs:
                  if x not in seen:
                      out.append(x); seen.add(x)
              return out
          def merge(a,b):
              A=[l.rstrip() for l in a.strip().splitlines()]
              B=[l.rstrip() for l in b.strip().splitlines()]
              if ''.join(A)==''.join(B):
                  return '\n'.join(A)+'\n'
              if all(l.startswith(('import ','from ')) or l=='' for l in A+B):
                  imp=dedupe([*A,*B]); imp=[l for l in imp if l]; imp.sort()
                  return '\n'.join(imp)+'\n'
              if 'app.include_router' in '\n'.join([*A,*B]):
                  def blocks(L):
                      buf=[]; out=[]
                      for l in L+['']:
                          buf.append(l)
                          if l.strip().startswith(')') or l.strip()=='':
                              ch='\n'.join(buf).strip()
                              if 'app.include_router' in ch: out.append(ch)
                              buf=[]
                      return out
                  m=dedupe(blocks(A)+blocks(B))
                  if m: return '\n\n'.join(m)+'\n'
              if len(A)<=10 and len(B)<=10:
                  return '\n'.join(dedupe(A+B))+'\n'
              return None
          for p in pathlib.Path('.').rglob('*.py'):
              t=p.read_text(errors='ignore')
              if '<<<<<<<' in t and '>>>>>>>' in t:
                  def repl(m):
                      r=merge(m.group(1), m.group(2))
                      return m.group(0) if r is None else r
                  new=CON.sub(repl,t)
                  if new!=t:
                      p.write_text(new); sh(f"git add {p}")
          PY

      - name: Continue rebase if possible
        run: git -c core.editor=true rebase --continue || true

      - name: Check remaining conflicts
        id: conf
        run: |
          git ls-files -u | cut -f2 | sort -u > /tmp/conflicts || true
          cat /tmp/conflicts || true
          echo "count=$(wc -l < /tmp/conflicts | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Format (normalize diffs)
        if: steps.conf.outputs.count == '0'
        run: |
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install black isort >/dev/null 2>&1 || true
          isort . || true
          black . || true
          git add -A

      - name: Commit & push if clean
        if: steps.conf.outputs.count == '0'
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "auto-rebase on main (+safe conflict resolves)"
          fi
          git push --force-with-lease origin HEAD:${{ matrix.pr.ref }}

      - name: Generate per-file conflict comments with full hunks
        if: steps.conf.outputs.count != '0'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ matrix.pr.number }}
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const files = fs.readFileSync('/tmp/conflicts','utf8').trim().split('\n').filter(Boolean);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prnum = Number(process.env.PR_NUMBER);
            
            await github.rest.issues.addLabels({ 
              owner, repo, issue_number: prnum, 
              labels: ['codex','needs-merge-help','auto-conflict'] 
            }).catch(()=>{});
            
            // Post one comment per conflicted file with full hunks
            for (const file of files) {
              try {
                const content = fs.readFileSync(file, 'utf8');
                const lines = content.split('\n');
                let conflictBlocks = [];
                let inConflict = false;
                let currentBlock = [];
                let contextSize = 10;
                
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i];
                  if (line.startsWith('<<<<<<<')) {
                    inConflict = true;
                    const start = Math.max(0, i - contextSize);
                    const beforeContext = lines.slice(start, i);
                    currentBlock = [...beforeContext, line];
                  } else if (line.startsWith('>>>>>>>') && inConflict) {
                    currentBlock.push(line);
                    const end = Math.min(lines.length, i + contextSize + 1);
                    const afterContext = lines.slice(i + 1, end);
                    currentBlock.push(...afterContext);
                    conflictBlocks.push(currentBlock.join('\n'));
                    currentBlock = [];
                    inConflict = false;
                  } else if (inConflict) {
                    currentBlock.push(line);
                  }
                }
                
                const header = `## ðŸ”§ Conflict in: \`${file}\`\n\n${process.env.CODEX_HANDLE} - This file has merge conflicts that need resolution.\n\n`;
                
                if (conflictBlocks.length === 0) {
                  const body = header + 
                    '```\n' + content.slice(0, 50000) + '\n```\n\n' +
                    '**Instructions:** Reply with a ```resolved:' + file + '``` code fence containing the fully resolved file.';
                  await github.rest.issues.createComment({ 
                    owner, repo, issue_number: prnum, body 
                  });
                } else {
                  for (let i = 0; i < conflictBlocks.length; i++) {
                    const isLast = i === conflictBlocks.length - 1;
                    let body = '';
                    if (i === 0) body = header;
                    body += `### Conflict ${i + 1} of ${conflictBlocks.length}\n\n` +
                            '```diff\n' + conflictBlocks[i] + '\n```\n\n';
                    if (isLast) {
                      body += '**Instructions:** Reply with a ```resolved:' + file + 
                              '``` code fence containing the fully resolved file with all conflicts merged correctly.';
                    }
                    if (body.length < 60000) {
                      await github.rest.issues.createComment({ 
                        owner, repo, issue_number: prnum, body 
                      });
                    } else {
                      const truncated = body.slice(0, 59000) + '\n\n[Truncated due to size]';
                      await github.rest.issues.createComment({ 
                        owner, repo, issue_number: prnum, body: truncated 
                      });
                    }
                  }
                }
              } catch (e) {
                const body = `## ðŸ”§ Conflict in: \`${file}\`\n\n` +
                            `Could not read file content: ${e.message}\n\n` +
                            `${process.env.CODEX_HANDLE} - Please manually check this file.`;
                await github.rest.issues.createComment({ 
                  owner, repo, issue_number: prnum, body 
                });
              }
            }
            
            const summary = `## ðŸ“‹ Conflict Resolution Summary\n\n` +
                          `Found ${files.length} file(s) with merge conflicts.\n\n` +
                          `${process.env.CODEX_HANDLE} - Please review the conflicts above and provide ` +
                          `\`\`\`resolved:<path>\`\`\` code fences for each file to resolve them.\n\n` +
                          `The apply-ai-patches workflow will automatically apply your fixes.`;
            await github.rest.issues.createComment({ 
              owner, repo, issue_number: prnum, body: summary 
            });

  one-pr:
    if: github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        contains(github.event.comment.body, '/autofix')
    runs-on: ubuntu-latest
    # PR-specific concurrency to prevent workflow cancellation during conflict posting
    concurrency:
      group: autofix-pr-${{ github.event.issue.number }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Get PR info
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            core.setOutput('number', pr.number);
            core.setOutput('ref', pr.head.ref);

      - name: Configure bot & fetch
        run: |
          git config user.name  "autorebase-bot"
          git config user.email "autorebase-bot@users.noreply.github.com"
          git config rerere.enabled true
          git fetch origin "${{ steps.pr.outputs.ref }}"
          git checkout "${{ steps.pr.outputs.ref }}"
          git fetch origin main

      - name: Rebase
        run: git rebase origin/main || true

      - name: Autofix common conflicts (same as above)
        run: |
          python - <<'PY'
          import re, subprocess, pathlib
          sh=lambda c: subprocess.run(c, shell=True, check=False)
          for p in pathlib.Path('.').rglob('*.md'):
              t=p.read_text(errors='ignore')
              if '<<<<<<<' in t and '>>>>>>>' in t:
                  t=re.sub(r'^<<<<<<< .*?\n|^=======\n|^>>>>>>> .*?\n','',t,flags=re.M)
                  p.write_text(t); sh(f"git add {p}")
          for n in ['package-lock.json','yarn.lock','pnpm-lock.yaml','poetry.lock']:
              p=pathlib.Path(n)
              if p.exists(): sh(f"git checkout --ours {n} && git add {n}")
          CON=re.compile(r"<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n", re.S)
          def dedupe(xs):
              out=[]; seen=set()
              for x in xs:
                  if x not in seen:
                      out.append(x); seen.add(x)
              return out
          def merge(a,b):
              A=[l.rstrip() for l in a.strip().splitlines()]
              B=[l.rstrip() for l in b.strip().splitlines()]
              if ''.join(A)==''.join(B):
                  return '\n'.join(A)+'\n'
              if all(l.startswith(('import ','from ')) or l=='' for l in A+B):
                  imp=dedupe([*A,*B]); imp=[l for l in imp if l]; imp.sort()
                  return '\n'.join(imp)+'\n'
              if 'app.include_router' in '\n'.join([*A,*B]):
                  def blocks(L):
                      buf=[]; out=[]
                      for l in L+['']:
                          buf.append(l)
                          if l.strip().startswith(')') or l.strip()=='':
                              ch='\n'.join(buf).strip()
                              if 'app.include_router' in ch: out.append(ch)
                              buf=[]
                      return out
                  m=dedupe(blocks(A)+blocks(B))
                  if m: return '\n\n'.join(m)+'\n'
              if len(A)<=10 and len(B)<=10:
                  return '\n'.join(dedupe(A+B))+'\n'
              return None
          for p in pathlib.Path('.').rglob('*.py'):
              t=p.read_text(errors='ignore')
              if '<<<<<<<' in t and '>>>>>>>' in t:
                  def repl(m):
                      r=merge(m.group(1), m.group(2))
                      return m.group(0) if r is None else r
                  new=CON.sub(repl,t)
                  if new!=t:
                      p.write_text(new); sh(f"git add {p}")
          PY

      - name: Continue rebase if possible
        run: git -c core.editor=true rebase --continue || true

      - name: Check remaining conflicts
        id: conf
        run: |
          git ls-files -u | cut -f2 | sort -u > /tmp/conflicts || true
          cat /tmp/conflicts || true
          echo "count=$(wc -l < /tmp/conflicts | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Format (normalize diffs)
        if: steps.conf.outputs.count == '0'
        run: |
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install black isort >/dev/null 2>&1 || true
          isort . || true
          black . || true
          git add -A

      - name: Commit & push if clean
        if: steps.conf.outputs.count == '0'
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "autofix: rebase + safe conflict resolves"
          fi
          git push --force-with-lease origin HEAD:${{ steps.pr.outputs.ref }}

      - name: Post per-file conflicts (manual path)
        if: steps.conf.outputs.count != '0'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const files = fs.readFileSync('/tmp/conflicts','utf8').trim().split('\n').filter(Boolean);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prnum = Number(process.env.PR_NUMBER);
            
            await github.rest.issues.addLabels({ 
              owner, repo, issue_number: prnum, 
              labels: ['codex','needs-merge-help','auto-conflict'] 
            }).catch(()=>{});
            
            for (const file of files) {
              try {
                const content = fs.readFileSync(file, 'utf8');
                const lines = content.split('\n');
                let conflictBlocks = [];
                let inConflict = false;
                let currentBlock = [];
                let contextSize = 10;
                
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i];
                  if (line.startsWith('<<<<<<<')) {
                    inConflict = true;
                    const start = Math.max(0, i - contextSize);
                    const beforeContext = lines.slice(start, i);
                    currentBlock = [...beforeContext, line];
                  } else if (line.startsWith('>>>>>>>') && inConflict) {
                    currentBlock.push(line);
                    const end = Math.min(lines.length, i + contextSize + 1);
                    const afterContext = lines.slice(i + 1, end);
                    currentBlock.push(...afterContext);
                    conflictBlocks.push(currentBlock.join('\n'));
                    currentBlock = [];
                    inConflict = false;
                  } else if (inConflict) {
                    currentBlock.push(line);
                  }
                }
                
                const header = `## ðŸ”§ Conflict in: \`${file}\`\n\n${process.env.CODEX_HANDLE} - This file has merge conflicts that need resolution.\n\n`;
                
                if (conflictBlocks.length === 0) {
                  const body = header + 
                    '```\n' + content.slice(0, 50000) + '\n```\n\n' +
                    '**Instructions:** Reply with a ```resolved:' + file + '``` code fence containing the fully resolved file.';
                  await github.rest.issues.createComment({ 
                    owner, repo, issue_number: prnum, body 
                  });
                } else {
                  for (let i = 0; i < conflictBlocks.length; i++) {
                    const isLast = i === conflictBlocks.length - 1;
                    let body = '';
                    if (i === 0) body = header;
                    body += `### Conflict ${i + 1} of ${conflictBlocks.length}\n\n` +
                            '```diff\n' + conflictBlocks[i] + '\n```\n\n';
                    if (isLast) {
                      body += '**Instructions:** Reply with a ```resolved:' + file + 
                              '``` code fence containing the fully resolved file with all conflicts merged correctly.';
                    }
                    if (body.length < 60000) {
                      await github.rest.issues.createComment({ 
                        owner, repo, issue_number: prnum, body 
                      });
                    } else {
                      const truncated = body.slice(0, 59000) + '\n\n[Truncated due to size]';
                      await github.rest.issues.createComment({ 
                        owner, repo, issue_number: prnum, body: truncated 
                      });
                    }
                  }
                }
              } catch (e) {
                const body = `## ðŸ”§ Conflict in: \`${file}\`\n\n` +
                            `Could not read file content: ${e.message}\n\n` +
                            `${process.env.CODEX_HANDLE} - Please manually check this file.`;
                await github.rest.issues.createComment({ 
                  owner, repo, issue_number: prnum, body 
                });
              }
            }
            
            const summary = `## ðŸ“‹ Conflict Resolution Summary\n\n` +
                          `Found ${files.length} file(s) with merge conflicts.\n\n` +
                          `${process.env.CODEX_HANDLE} - Please review the conflicts above and provide ` +
                          `\`\`\`resolved:<path>\`\`\` code fences for each file to resolve them.\n\n` +
                          `The apply-ai-patches workflow will automatically apply your fixes.`;
            await github.rest.issues.createComment({ 
              owner, repo, issue_number: prnum, body: summary 
            });