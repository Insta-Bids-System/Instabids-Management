jobs:
  autofix:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/autofix')) ||
      (github.event_name == 'pull_request_target' && github.event.label.name == 'autofix') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Determine PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "num=${{ inputs.pr }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "num=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "num=${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout PR branch
        run: gh pr checkout ${{ steps.pr.outputs.num }}
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }

      - name: Bot identity
        run: |
          git config user.name "autofix-bot"
          git config user.email "autofix-bot@users.noreply.github.com"

      - name: Rebase on latest main (allow conflicts)
        run: |
          git fetch origin main
          git rebase origin/main || true

      - name: List conflicted files
        id: conflicts
        run: |
          git diff --name-only --diff-filter=U > /tmp/conflicts || true
          cat /tmp/conflicts || true
          echo "count=$(wc -l </tmp/conflicts | tr -d ' ')" >> $GITHUB_OUTPUT

      # === NEW: resolve Python conflicts heuristically ===
      - name: Resolve simple Python conflicts
        if: steps.conflicts.outputs.count != '0'
        run: |
          python - <<'PY'
          from scripts.automerge_py_conflicts import main
          main()
          PY

      # Existing safe resolvers (docs/locks)
      - name: Resolve docs & lockfiles safely
        run: |
          if [ -f /tmp/conflicts ]; then files=$(cat /tmp/conflicts); else files=""; fi
          for f in $files; do
            case "$f" in
              *.md) awk 'BEGIN{p=1}/^<<<<<<< /{next}/^=======$/{next}/^>>>>>>> /{next}{print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"; git add "$f" ;;
              package-lock.json|poetry.lock|pnpm-lock.yaml|yarn.lock) git checkout --ours "$f" && git add "$f" || true ;;
            esac
          done

      - name: Install formatters & tests
        run: |
          python -m pip install --upgrade pip
          pip install black isort pytest || true

      - name: Format to normalize diffs
        run: |
          isort . || true
          black . || true

      - name: Continue rebase if possible
        run: git -c core.editor=true rebase --continue || true

      - name: Check remaining conflicts
        id: conflicts2
        run: |
          git diff --name-only --diff-filter=U > /tmp/conflicts2 || true
          cat /tmp/conflicts2 || true
          echo "count=$(wc -l </tmp/conflicts2 | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Run tests
        if: steps.conflicts2.outputs.count == '0'
        run: |
          if [ -d ai-agents/tests ]; then pytest -q ai-agents/tests; else echo "no tests"; fi

      - name: Commit & push if clean
        if: steps.conflicts2.outputs.count == '0'
        run: |
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "autofix: resolve conflicts (imports/routers/docs) & format"
            git push --force-with-lease
          fi

      - name: Comment remaining conflicts
        if: steps.conflicts2.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readFileSync('/tmp/conflicts2','utf8').trim().split('\n').filter(Boolean);
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: Number('${{ steps.pr.outputs.num }}'),
              body: [
                '⚠️ **Autofix could not safely resolve these files:**',
                ...files.map(f => `- \`${f}\``),
                '',
                'I will only resolve Python imports/duplicate FastAPI router blocks, docs and lockfiles automatically.',
                'For what remains, ask your agent to propose a merged block as a PR **suggested change**.'
              ].join('\n')
            });
