name: Autofix PR conflicts
on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr:
        description: PR number
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  autofix:
    if: (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/autofix')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "num=${{ inputs.pr }}" >> $GITHUB_OUTPUT
          else
            echo "num=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR branch
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          gh pr checkout ${{ steps.pr.outputs.num }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure bot identity
        run: |
          git config user.name "autofix-bot"
          git config user.email "autofix-bot@users.noreply.github.com"

      - name: Rebase on latest main
        run: |
          git fetch origin main
          # try rebase first; if it fails, we continue and resolve file-by-file
          git rebase origin/main || true

      - name: List conflicted files
        id: conflicts
        run: |
          git diff --name-only --diff-filter=U > /tmp/conflicts || true
          cat /tmp/conflicts || true
          echo "count=$(wc -l </tmp/conflicts | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Auto-resolve known-safe files
        if: steps.conflicts.outputs.count != '0'
        run: |
          set -e
          while read -r f; do
            case "$f" in
              *.md|*requirements*.txt)
                # union merge: keep both sides
                awk 'BEGIN{p=1}/^<<<<<<< /{p=1;next}/^=======$/{p=1;next}/^>>>>>>> /{p=1;next}{print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
                git add "$f"
                ;;
              package-lock.json|poetry.lock|pnpm-lock.yaml|yarn.lock)
                # prefer PR’s version
                git checkout --ours "$f" || true
                git add "$f" || true
                ;;
            esac
          done < /tmp/conflicts || true

      - name: Format Python to reduce residual conflicts
        run: |
          pipx install black isort || python -m pip install black isort
          isort . || true
          black . || true

      - name: Re-check for conflicts
        id: conflicts2
        run: |
          git add -A
          if ! git -c core.editor=true rebase --continue; then true; fi
          git diff --name-only --diff-filter=U > /tmp/conflicts || true
          cat /tmp/conflicts || true
          echo "count=$(wc -l </tmp/conflicts | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Commit and push if clean
        if: steps.conflicts2.outputs.count == '0'
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "autofix: resolve trivial conflicts and format"
            git push --force-with-lease
          fi

      - name: Comment if anything remains
        if: steps.conflicts2.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readFileSync('/tmp/conflicts','utf8').trim().split('\n').filter(Boolean);
            const body = [
              '⚠️ **Autofix could not safely resolve all conflicts.**',
              '',
              'Files still conflicted:',
              ...files.map(f => `- \`${f}\``),
              '',
              'For code files, I only auto-merge docs and lockfiles. Please resolve the logic conflict (or ask your agent to propose a merged block) and push.'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR || '${{ steps.pr.outputs.num }}'),
              body
            });
        env:
          PR: ${{ steps.pr.outputs.num }}
